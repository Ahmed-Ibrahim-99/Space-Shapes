;AUTHOR : [AHMED IBRAHIM ABDELLATIF] [CODE: 1170024] [BONUS GAME]
;ALL THE CODE IS WRITTEN BY ME FROM SCRATCH 
;I DIDN'T USE ANY ONLINE RESOURCE EXCEPT THE WEBSITE https://www.dcode.fr/binary-image TO CONVERT
;JPG IMAGES OF CHARACTER1, CHARACTER2 AND KEYBORD ARROWS TO BINARY THEN I LOOPED ON THEM MANUALLY TO CHANGE THE BINARY BITS 
;TO THE DESIRED COLOR VALUES OF MY CHARACTERS

.MODEL SMALL

.STACK 64

.DATA
;--------------------
;----------------
;----------------
;COLORS
BLACK DB 0
;----------------
;----------------
;TRIANGLE VARIABLES
TRIANGLE_X DW ?

TRIANGLE_Y DW ?

TRIANGLE_COLOR DB 1

TRIANGLE_COUNTER DW ?

T_DRAW_X DW ?

T_DRAW_Y DW ?
;----------------
;----------------
;CIRCLE VARIABLES
CIRCLE_X DW ?

CIRCLE_Y DW ?

CIRCLE_COLOR DB 4
;----------------
;----------------
;SQUARE VARIABLES
SQUARE_X DW ?

SQUARE_Y DW ?

S_DRAW_X DW ?

S_DRAW_Y DW ?

SQUARE_COLOR DB 2
;----------------
;----------------
;RECTANGLE VARIABLES
RECTANGLE_X DW ?

RECTANGLE_Y DW ?

R_DRAW_X DW ?

R_DRAW_Y DW ?

RECTANGLE_COLOR DB 0EH
;----------------

;--------------------------------------------------------------------------
;CHARACTER 1 VARIABLES
CHARACTER DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0
DB 0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0,0FH,0,0,0,0,0
DB 0,0,0,0,0,0FH,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0FH,0,0,0,0FH,0,0,0
DB 0,0,0,0,0,0FH,0,0,0,0FH,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0FH,0,0,0,0,0FH,0FH,0FH,0FH,0FH
DB 0FH,0FH,0FH,0FH,0FH,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0FH,0,0,0FH,0FH,0FH
DB 0FH,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0FH,0,0FH,0,0,0FH,0,0,0FH
DB 0,0,0,0,0FH,0,0,0FH,0FH,0FH,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0FH,0,0,0,0FH,0,0,0FH,0,0FH,0
DB 0,0FH,0,0,0FH,0FH,0FH,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0
DB 0,0,0,0FH,0,0FH,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0FH,0,0,0FH
DB 0FH,0FH,0FH,0,0,0FH,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0FH,0FH,0FH,0FH
DB 0FH,0FH,0FH,0,0FH,0FH,0FH,0FH,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0FH
DB 0,0,0,0,0FH,0,0FH,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0FH,0,0FH,0,0,0,0,0,0,0,0FH,0FH,0FH
DB 0,0,0FH,0FH,0FH,0FH,0FH,0,0FH,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0
DB 0,0,0,0,0,0FH,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0
DB 0FH,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0FH,0,0FH,0,0,0
DB 0,0FH,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH
DB 0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0,0FH,0FH,0FH,0FH,0FH
DB 0FH,0FH,0FH,0FH,0,0,0,0,0,0,0,0FH,0FH,0,0FH,0FH,0FH,0FH,0FH,0FH,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0FH,0FH,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0FH,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0FH,0FH,0FH,0,0,0,0
DB 0,0,0,0,0,0,0FH,0FH,0FH,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0FH,0FH,0FH,0FH
DB 0FH,0FH,0FH,0FH,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0FH,0FH,0FH,0FH,0FH,0FH,0FH,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0FH,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 
CHARACTER_INITIAL_X DW 10
CHARACTER_PIXEL_X DW ?
;-----------------------------------------------------------------------------------------
;CHARACTER 2 VARIABLES
CHARACTER2 DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
DB 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1
DB 1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1
DB 1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1
DB 1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1
DB 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0DH,0DH
DB 0DH,0DH,0DH,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0DH,0DH,0DH,0DH
DB 0DH,0DH,0DH,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0DH,0DH,0DH,0DH
DB 0DH,0DH,0DH,0DH,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0DH,0DH,0DH,0DH,0DH
DB 0DH,0DH,0DH,0DH,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0DH,0DH,0DH,0DH,0DH
DB 0DH,0DH,0DH,0DH,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0DH,0DH,0DH,0DH,0DH
DB 0DH,0DH,0DH,0DH,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0DH,0DH,0DH,0DH,0DH
DB 0DH,0DH,0DH,0DH,1,1,1,1,1,1,1,0EH,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0DH,0DH,0DH,0DH
DB 0DH,0DH,1,1,1,1,1,1,1,1,0EH,0EH,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0EH,1,1,1,1,1,1,1,1,1,1,0DH,0DH,0DH
DB 1,1,1,1,1,0EH,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0EH,0EH,1,1,1,1,0EH,1,1,1
DB 1,1,1,1,1,1,1,1,0EH,0EH,0EH,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0EH,0EH,0EH,1,1,1,1
DB 0EH,0EH,1,1,1,1,1,0EH,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0EH,1,1,1,1,1,0EH,0EH
DB 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DB 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DB 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DB 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DB 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DB 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DB 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DB 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DB 1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DB 1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DB 1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1
DB 1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2
DB 2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2
DB 2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

CHARACTER2_INITIAL_X DW 150
CHARACTER2_PIXEL_X DW ?
UFO_DIRECTION DB 0
;--------------------------------------------------------------------------
;HELP MENU VARIABLES
ARROWS DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4
DB 4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4
DB 4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4
DB 4,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,4
DB 4,4,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4
DB 4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4
DB 4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,4,4,4,4,4,4,4,4,4,4
DB 4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0
DB 4,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,4,4,4,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,4,4
DB 4,4,4,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,4
DB 4,4,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,4,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 4,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,4,4,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4
DB 4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0
;HELP MENU
ARROWS_PIXEL_X DW ?
CONTROLS_MSG DB 'CONTROLS OF THE GAME','$'
UP_MSG DB 'UP : SHOOTS A BULLET','$'
LEFT_MSG DB 'LEFT : MOVES ALIEN LEFT','$'
RIGHT_MSG DB 'RIGHT : MOVES ALIEN RIGHT','$'
ORGANIZING_LINE DB '---------------------------------------------------------','$'
INSTR_MSG DB 'INSTRUCTIONS','$'
INSTR_1 DB '1- WHEN YOU SHOOT A BULLET THE NEXT BULLET CAN BE SHOOT WHEN THE','$' 
INSTR_2 DB 'PREVIOUS ONE HITS A SHAPE OR REACHES THE MAX HEIGHT SO CHOOSE WISELY','$'
INSTR_3 DB '2- YOU HAVE TO SHOOT THE SHAPE INDICATED ON THE UPPER LEFT OF THE SCREEN','$'
INSTR_4 DB 'TO GET A POINT, IF YOU LET IT FALL OR SHOOT ANOTHER SHAPE YOU LOSE A LIFE','$'
INSTR_5 DB '3- TAKE CARE, THE INDICATED SHAPE CHANGES WITH TIME SO BE FAST AND ACCURATE','$'
INSTR_6 DB '4- YOU WIN THE GAME WHEN YOU REACH A SCORE OF 20','$'
END_HELP_MSG DB 'PRESS ANY KEY TO RETURN TO MENU'
;--------------------------------------------------------------------------
;THROWING SHAPES VARIABLES
THROW_COUNTER DB 0
SQUARE_THROWN DB 0
CIRCLE_THROWN DB 0
RECTANGLE_THROWN DB 0
TRIANGLE_THROWN DB 0
;-----------------------------
;BULLET VARIABLES
BULLET_X DW ?
BULLET_Y DW ?
BULLET_FLAG DB 0
SQUARE_SHOT DB 0
CIRCLE_SHOT DB 0
TRIANGLE_SHOT DB 0
RECTANGLE_SHOT DB 0
;-----------------------------
;SCORING VARIABLES
SHAPE_COUNTER DB 1
MSG1 DB 'SHOOT THE SQUARE   ','$'
MSG2 DB 'SHOOT THE CIRCLE   ','$'
MSG3 DB 'SHOOT THE RECTANGLE','$'
MSG4 DB 'SHOOT THE TRIANGLE ','$'
LINE DB "--------------------------------------------------------------------------------",'$'
HEART DB 3," x",'$'
LIFE DB '5'
SCORE DW 0H
SCORE_MSG DB 'SCORE: ','$'
ABOVE_FLAG DB 0
SHAPE_CHECK_FLAG DB 0
WON DB 1
WON_MSG DB 'CONGRATS YOU WON!! YOU ARE SHAPES EXPERT','$'
LOST_MSG DB 'HARD LUCK!! PLAY AGAIN TO BE EXPERT','$'
WAIT_KEY_MSG DB 'PRESS ANY KEY TO RETURN TO MENU','$'
;-----------------------------
;MAIN MENU VARIABLES
START_MSG DB 'START'
HELP_MSG DB 'HELP'
EXIT_MSG DB 'EXIT'
CHOICE DB 1
;-----------------------------
;EXIT FLAG
EXIT_FLAG DB 0
.CODE
;--------------------------------------------
MAIN PROC FAR
    MOV AX,@DATA             ;INITIALIIZNG THE SEGMENTS
    MOV DS,AX
    MOV ES,AX
    
     ;-------------------------------
     ;ENTRY POINT OF THE GAME
     BEGINING:
     CALL REINITIALIZE       ;RETINITIALIZE ALL THE VARIABLES (NEEDED FOR THE RETURN TO THE MAIN MENU)
     MOV AH,0                ;RESET THE VIDEO MODE TO 12
     MOV AL,12H
     INT 10H
     ;-----------------
     CALL MAIN_MENU          ;CALL MAIN MENU PROCEDURE
     ;-----------------
     ;MAIN MENU CHOICES
     CMP CHOICE,1            ;1- GAME
     JE GAME
                             ;3- EXIT THE WHOLE PROGRAM
     CMP CHOICE,3
     JE  GET_OUT_PROGRAM
                             
     CALL HELP_MENU          ;ELSE 2- HELP MENU
     JMP BEGINING
     ;-----------------
     GAME:
     MOV AH,0                
     MOV AL,12H
     INT 10H
     CALL DRAW_ALIEN         ;DRAW THE ALIEN AT THE INITIAL POSITION
     ;-----------------
     GAME_LOOP:
     CALL PRINT_SCORE        ;PRINT THE SCORE OF THE PLAYER
     CALL MOVE_UFO           ;MOVE THE UFO IN A HORIZTONTAL MOTION
     CALL INITIALIZE_SHAPES  ;CALL THE FUNCTION TO INITIALIZE THE POSITION OF THE FALLING SHAPES
     CALL THROW_SHAPES       ;THROW SHAPES IN A VERTICAL MOTION
     CALL MOVE_ALIEN         ;CHECK KEYS AND MOVE ALIEN ACCORDINGLY AND CHECK FOR SHOT
     CALL MOVE_BULLET        ;IF BULLET IS SHOT MOVE IT VERTICALLY
     CALL SHAPE_MEETS_BULLET ;CHECK IF A SHAPE IS SHOT AND AFFECT THE SCORE ACCORDINGLY
     CMP SCORE,20            ;WINING CONDITION
     JNE GAME_CHECK_2
     MOV WON,1
     JMP END_GAME_WON
     GAME_CHECK_2:           
     CMP LIFE,'0'            ;LOSING CONDITION
     JE END_GAME_LOST
     CMP EXIT_FLAG,1         ;CHECK IF EXIT FLAG = 1 WHICH MEANS THE PLAYER CLICKED ESC
     JE RETURN_BACK
     JMP GAME_LOOP
     ;-----------------
     END_GAME_WON:
     
     CALL DISPLAY_WON        ;CALL THE PROCEDURE TO DISPLAY THAT HE WON
     
     MOV AH,0                ;WAIT FOR KEY TO RETURN TO MAIN MENU
     INT 16H
     MOV AH,1
     INT 16H
     
     JMP RETURN_BACK
     ;-----------------
     END_GAME_LOST:
     CALL DISPLAY_LOST       ;CALL THE PROCEDURE TO DISPLAY THAT HE LOST
     
     MOV AH,0                ;WAIT FOR KEY TO RETURN TO MAIN MENU
     INT 16H
     MOV AH,1
     INT 16H
     
     RETURN_BACK:
     JMP BEGINING            ;JUMP TO MAIN MENU
     ;-----------------
     GET_OUT_PROGRAM:
     MOV AH,0
     MOV AL,12H
     INT 10H
     
     MOV AH,4CH             
     INT 21H
     
MAIN ENDP
;--------------------------------------------


;-------------------------------------------
;HELP MENU PROCEDURE
HELP_MENU PROC
    
    MOV AH,0
    MOV AL,12H
    INT 10H
    ;-----------------
    ;DISPLAYING 'PRESS ANY KEY TO RETURN TO MENU'
    LEA BP,END_HELP_MSG       
    MOV CX,31
    MOV DH,3
    MOV DL,21
    MOV AH,13H 
    MOV AL,0
    MOV BH,0
    MOV BL,2
    INT 10H
    ;-----------------
    ;DRAWING THE ARROWS: COLORS OF PIXELS ARE STORED IN MEMORY
    LEA DI,ARROWS
    MOV DX,200
    MOV CX,48
    ;LOOPING ON PIXEL COLORS IN MEMORY TO DRAW THEM ON SCREEN
    ARROWS_VERTICAL_LOOP:
    MOV ARROWS_PIXEL_X,255
    PUSH CX
    MOV CX,93
    ARROWS_HORIZONTAL_LOOP:
    PUSH CX
    MOV CX,ARROWS_PIXEL_X
    MOV AL,[DI]
    MOV AH,0CH
    INT 10H
    INC DI
    INC ARROWS_PIXEL_X
    POP CX
    LOOP ARROWS_HORIZONTAL_LOOP
    INC DX
    POP CX
    LOOP ARROWS_VERTICAL_LOOP
    MOV ARROWS_PIXEL_X,255
    MOV CX,90
    ARROWS_HORIZONTAL_LOOP2:
    PUSH CX
    MOV CX,ARROWS_PIXEL_X
    MOV AL,[DI]
    MOV AH,0CH
    INT 10H
    INC DI
    INC ARROWS_PIXEL_X
    POP CX
    LOOP ARROWS_HORIZONTAL_LOOP2
    ;-----------------
    ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
    MOV AH,2
    MOV DL,27
    MOV DH,6
    INT 10H
    
    LEA DX,CONTROLS_MSG
    MOV AH,9
    INT 21H
    ;-----------------
    ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
    MOV AH,2
    MOV DL,10
    MOV DH,8
    INT 10H
    
    LEA DX,ORGANIZING_LINE
    MOV AH,9
    INT 21H
    ;-----------------
    ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
    MOV AH,2
    MOV DL,27
    MOV DH,10
    INT 10H
    
    LEA DX,UP_MSG
    MOV AH,9
    INT 21H
    ;-----------------
    ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
    MOV AH,2
    MOV DL,6
    MOV DH,14
    INT 10H
    
    LEA DX,LEFT_MSG
    MOV AH,9
    INT 21H
    ;-----------------
    ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
    MOV AH,2
    MOV DL,46
    MOV DH,14
    INT 10H
    
    LEA DX,RIGHT_MSG
    MOV AH,9
    INT 21H
    ;-----------------
    ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
    MOV AH,2
    MOV DL,10
    MOV DH,17
    INT 10H
    
    LEA DX,ORGANIZING_LINE
    MOV AH,9
    INT 21H
    ;-----------------
    ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
    MOV AH,2
    MOV DL,31
    MOV DH,19
    INT 10H
    
    LEA DX,INSTR_MSG
    MOV AH,9
    INT 21H
    ;-----------------
    ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
    MOV AH,2
    MOV DL,6
    MOV DH,21
    INT 10H
    
    LEA DX,INSTR_1
    MOV AH,9
    INT 21H
    ;-----------------
    ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
    MOV AH,2
    MOV DL,5
    MOV DH,22
    INT 10H
    
    LEA DX,INSTR_2
    MOV AH,9
    INT 21H
    ;-----------------
    ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
    MOV AH,2
    MOV DL,3
    MOV DH,23
    INT 10H
    
    LEA DX,INSTR_3
    MOV AH,9
    INT 21H
    ;-----------------
    ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
    MOV AH,2
    MOV DL,3
    MOV DH,24
    INT 10H
    
    LEA DX,INSTR_4
    MOV AH,9
    INT 21H
    ;-----------------
    ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
    MOV AH,2
    MOV DL,2
    MOV DH,25
    INT 10H
    
    LEA DX,INSTR_5
    MOV AH,9
    INT 21H
    ;-----------------
    ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
    MOV AH,2
    MOV DL,13
    MOV DH,26
    INT 10H
    
    LEA DX,INSTR_6
    MOV AH,9
    INT 21H
    ;-----------------
    ;WAIT FOR KEY PRESS TO RETURN
    MOV AH,0
    INT 16H
    MOV AH,1
    INT 16H
    ;-----------------
    RET    
HELP_MENU ENDP
;-------------------------------------------
;DISPLAY MAIN MENU PROCEDURES

;REINITILAIZE VARIABLES
REINITIALIZE PROC
    MOV CHOICE,1
    MOV LIFE,'5'
    MOV SCORE,0H
    MOV ABOVE_FLAG,0
    MOV SHAPE_CHECK_FLAG,0
    MOV BULLET_FLAG,0
    MOV SQUARE_SHOT,0
    MOV CIRCLE_SHOT,0
    MOV TRIANGLE_SHOT,0
    MOV RECTANGLE_SHOT,0
    MOV THROW_COUNTER,0
    MOV SQUARE_THROWN,0
    MOV CIRCLE_THROWN,0
    MOV RECTANGLE_THROWN,0
    MOV TRIANGLE_THROWN,0
    MOV CHARACTER2_INITIAL_X,150
    MOV UFO_DIRECTION,0
    MOV CHARACTER_INITIAL_X,10
    MOV EXIT_FLAG,0
    MOV SHAPE_COUNTER,1
    
    RET
REINITIALIZE ENDP

;MAIN MENU PROCEDURE
MAIN_MENU PROC
    CALL CHOOSE
    CHECK:
    ;--------------
    MOV AH,1
    INT 16H
    JZ CHECK
    MOV AH,0
    INT 16H
    ;--------------
    CMP AX,5000H       ;IF THE PRESSED KEY IS THE DOWN ARROW
    JNZ OPTION2        ;OPTION1 DOWN
    INC [CHOICE]       ;INCREMENT THE CHOICE VARIABLE
    JMP MOVING
    OPTION2:           ;IF NOT DOWN CHECK IF IT WAS UP ARROW
    CMP AX,4800H       ;OPTION2 UP
    JNZ OPTION3
    DEC [CHOICE]       ;DECREMENT THE CHOICE VARIABLE
    JMP MOVING
    OPTION3:           ;IF NOT UP CHECK IF IT WAS ENTER
    CMP AX,1C0DH
    JNZ CHECK
    ;--------------                  
    JMP OUT_OF_MENU    ;GET OUT OF MENU
    ;--------------
    MOVING:            ;ADJUST CHOICE BETWEEN START, HELP AND EXIT
    CMP [CHOICE],0     
    JNZ OPTION4
    ADD [CHOICE],3     
    JMP PRINT
    OPTION4:
    CMP [CHOICE],4
    JNZ PRINT
    SUB [CHOICE],3     
    ;--------------
    PRINT:             ;PRINTING THE CHOICES WITH THE CHOICE IN GREEN
    CALL CHOOSE
    JMP CHECK          ;RETURN BACK TO THE BEGINING OF LOOP
    
    OUT_OF_MENU:
    RET
    
MAIN_MENU ENDP    

;DISPLAY CHOOSING PROCEDURE
CHOOSE PROC           ;PRINTING LEVEL CHOICES
    ;------------------------
    LEA BP,START_MSG       ;PRINTING 'START'
    MOV CX,5
    MOV DX,0A24H
    MOV AH,13H 
    MOV AL,0
    MOV BH,0
    MOV BL,0FH
    CMP CHOICE,1
    JNE WHITE1        ;IF NOT CHOSEN PRINT IN WHITE
    MOV BL,2          ;IF CHOSEN CHANGE TO GREEN
    WHITE1:
    INT 10H
    ;-----------------------
    MOV CX,4
    LEA BP,HELP_MSG       ;PRINTING 'HELP'
    ADD DH,5
    MOV DL,24H
    MOV AH,13H 
    MOV AL,0
    MOV BH,0
    MOV BL,0FH
    CMP CHOICE,2
    JNE WHITE2        ;IF NOT CHOSEN THEN WHITE
    MOV BL,2          ;IF CHOSEN THEN GREEN
    WHITE2:
    INT 10H
    ;------------------------
    MOV CX,4          ;PRINTING 'EXIT'
    LEA BP,EXIT_MSG
    ADD DH,5
    MOV DL,24H
    MOV AH,13H 
    MOV AL,0
    MOV BH,0
    MOV BL,0FH
    CMP CHOICE,3      ;IF NOT CHOSEN THEN WHITE
    JNE WHITE3        ;IF CHOSEN THEN GREEN
    MOV BL,2
    WHITE3:
    INT 10H
    ;------------------------
    RET
CHOOSE ENDP

;-------------------------------------------
;DISPLAY WIN/LOSS PROCEDURES
DISPLAY_WON PROC
     
     MOV AH,0         
     MOV AL,12H
     INT 10H
     ;-----------------
     ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
     MOV AH,2
     MOV DL,19
     MOV DH,15
     INT 10H
     
     LEA DX,WON_MSG
     MOV AH,9
     INT 21H
     
     ;-----------------
     ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
     MOV AH,2
     MOV DL,23
     MOV DH,16
     INT 10H
     
     LEA DX,WAIT_KEY_MSG
     MOV AH,9
     INT 21H
     RET
DISPLAY_WON ENDP

DISPLAY_LOST PROC
     MOV AH,0
     MOV AL,12H
     INT 10H
     
     ;-----------------
     ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
     MOV AH,2
     MOV DL,23
     MOV DH,15
     INT 10H
     
     LEA DX,LOST_MSG
     MOV AH,9
     INT 21H
     ;-----------------
     ;CHANGE CURSOR POSITION AND DISPLAY ON SCREEN
     MOV AH,2
     MOV DL,24
     MOV DH,16
     INT 10H
     
     LEA DX,WAIT_KEY_MSG
     MOV AH,9
     INT 21H
     RET
DISPLAY_LOST ENDP     
;--------------------------------------------
;CHARACTERS PROCEDURES
DRAW_UFO PROC
     LEA DI,CHARACTER2
     MOV DX,70
     MOV CX,30
     VERTICAL_LOOP2:              ;LOOPING ON THE COLOR PIXELS OF THE UFO IN MEMORY TO DRAW IT ON SCREEN
     MOV AX,CHARACTER2_INITIAL_X
     MOV CHARACTER2_PIXEL_X,AX
     PUSH CX
     MOV CX,70
     HORIZONTAL_LOOP2:
     PUSH CX
     MOV CX,CHARACTER2_PIXEL_X
     MOV AL,[DI]
     MOV AH,0CH
     INT 10H
     INC DI
     INC CHARACTER2_PIXEL_X
     POP CX
     LOOP HORIZONTAL_LOOP2
     INC DX
     POP CX
     LOOP VERTICAL_LOOP2
     RET
DRAW_UFO ENDP
;-----------------------------
;-----------------------------
DELETE_UFO PROC
     MOV DX,70
     MOV CX,30
     D_VERTICAL_LOOP2:            ;DRAW THE UFO WITH A BLACK COLOR ATTRIBUTE
     MOV AX,CHARACTER2_INITIAL_X
     MOV CHARACTER2_PIXEL_X,AX
     PUSH CX
     MOV CX,70
     D_HORIZONTAL_LOOP2:
     PUSH CX
     MOV CX,CHARACTER2_PIXEL_X
     MOV AL,BLACK
     MOV AH,0CH
     INT 10H
     INC CHARACTER2_PIXEL_X
     POP CX
     LOOP D_HORIZONTAL_LOOP2
     INC DX
     POP CX
     LOOP D_VERTICAL_LOOP2
     RET
DELETE_UFO ENDP
;-----------------------------
;-----------------------------
MOVE_UFO PROC
     
     CALL DELETE_UFO
     CMP UFO_DIRECTION,0             ;IF THE DIRECTION FLAG IS 0 MOVE THE UFO RIGHT
     JNZ MOVE_UFO_LEFT
     MOV AX,639
     SUB AX,CHARACTER2_INITIAL_X     ;CONDITION TO STOP MOVING RIGHT AND CHANGE THE FLAG TO 1 BEFORE THE UFO REACHES THE END OF SCREEN
     CMP AX,70                       ;NOTE: UFO DRAWING IS 70 PIXELS WIDTH
     JB  CHANGE_DIRECTION_TO_LEFT
     ADD CHARACTER2_INITIAL_X,30     ;IF NOT AT THE END OF SCREEN MOV UFO RIGHT
     JMP FINISH_MOVE_UFO
     MOVE_UFO_LEFT:
     CMP CHARACTER2_INITIAL_X,0      ;CONDITION TO STOP MOVING LEFT AND CHANGE THE FLAG TO 1 BEFORE THE UFO REACHES THE END OF SCREEN
     JLE CHANGE_DIRECTION_TO_RIGHT
     SUB CHARACTER2_INITIAL_X,30     ;IF NOT AT THE END OF SCREEN MOV UFO LEFT
     JMP FINISH_MOVE_UFO
     
     CHANGE_DIRECTION_TO_RIGHT:
     MOV UFO_DIRECTION,0             ;SET THE DIRECTION FLAG TO 0
     JMP FINISH_MOVE_UFO
     
     CHANGE_DIRECTION_TO_LEFT:
     MOV UFO_DIRECTION,1             ;SET THE DIRECTION FLAG TO 1
     
     FINISH_MOVE_UFO:
     CALL DRAW_UFO                   ;DRAW THE UFO AT THE NEW POSITION
     MOV CX,1H       ;DELAY
     MOV DX,1388H
     MOV AX,8600H
     INT 15H
     
     RET
     
MOVE_UFO ENDP
;-----------------------------
;-----------------------------
DRAW_ALIEN PROC
     LEA DI,CHARACTER
     MOV DX,447
     MOV CX,32
     VERTICAL_LOOP:                  ;LOOP ON TH ALIEN COLOR PIXELS TO DRAW IT ON SCREEN
     MOV AX,CHARACTER_INITIAL_X
     MOV CHARACTER_PIXEL_X,AX
     PUSH CX
     MOV CX,50
     HORIZONTAL_LOOP:
     PUSH CX
     MOV CX,CHARACTER_PIXEL_X
     MOV AL,[DI]
     MOV AH,0CH
     INT 10H
     INC DI
     INC CHARACTER_PIXEL_X
     POP CX
     LOOP HORIZONTAL_LOOP
     INC DX
     POP CX
     LOOP VERTICAL_LOOP
     RET
DRAW_ALIEN ENDP
;-----------------------------
;-----------------------------
DELETE_ALIEN PROC
     MOV DX,447
     MOV CX,32                       ;DRAW ALIEN WITH BLACK COLOR ATTRIBUTE
     VERTICAL_LOOP22:
     MOV AX,CHARACTER_INITIAL_X
     MOV CHARACTER_PIXEL_X,AX
     PUSH CX
     MOV CX,50
     HORIZONTAL_LOOP22:
     PUSH CX
     MOV CX,CHARACTER_PIXEL_X
     MOV AL,BLACK
     MOV AH,0CH
     INT 10H
     INC DI
     INC CHARACTER_PIXEL_X
     POP CX
     LOOP HORIZONTAL_LOOP22
     INC DX
     POP CX
     LOOP VERTICAL_LOOP22
     RET
DELETE_ALIEN ENDP
;-----------------------------
;-----------------------------
MOVE_ALIEN PROC
     MOV AH,1                        ;CHECK IF KEY IS PRESSED
     INT 16H
     JZ FINISH_MOVE_ALIEN
     MOV AH,0
     INT 16H
     CMP AX,4D00H                    ;IF RIGHT ARROW
     JNE ALIEN_SEC_CHECK
     MOV AX,629
     SUB AX,CHARACTER_INITIAL_X      ;CHECK IF THE SCREEN BOUNDARY IF NOT AT BOUNDARY MOVE IT RIGHT AND DRAW IT
     CMP AX,50                        
     JBE FINISH_MOVE_ALIEN
     CALL DELETE_ALIEN               ;MOVE ALIEN
     ADD CHARACTER_INITIAL_X,30
     CALL DRAW_ALIEN
     ALIEN_SEC_CHECK:                ;IF LEFT ARROW, SAME IDEA BUT MOVE IT LEFT
     CMP AX,4B00H
     JNE ALIEN_THIRD_CHECK
     MOV AX,CHARACTER_INITIAL_X
     CMP AX,10                       ;SCREEN BOUNDARY CONDITION
     JE FINISH_MOVE_ALIEN
     CALL DELETE_ALIEN
     SUB CHARACTER_INITIAL_X,30
     CALL DRAW_ALIEN
     ALIEN_THIRD_CHECK:
     CMP AX,4800H                    ;IF UP
     JNE GAME_EXIT_CHECK
     CMP BULLET_FLAG,1               ;SET BULLET_FLAG TO 1
     JE FINISH_MOVE_ALIEN
     CMP AX,4800H                    
     JNE FINISH_MOVE_ALIEN
     MOV AX,CHARACTER_INITIAL_X
     ADD AX,25
     MOV BULLET_X,AX                 ;INITIALIZE THE BULLET POSITION
     MOV BULLET_Y,441
     MOV BULLET_FLAG,1
     GAME_EXIT_CHECK:
     CMP AX,011BH                    ;IF ESC
     JNE FINISH_MOVE_ALIEN
     MOV EXIT_FLAG,1                 ;SET EXIT_FLAG TO 1
     FINISH_MOVE_ALIEN:
     RET
MOVE_ALIEN ENDP
;-----------------------------
;-----------------------------
DRAW_BULLET PROC
     MOV DX,BULLET_Y
     MOV CX,5
     BULLET_LOOP:                   ;DRAW BULLET LOOP
     PUSH CX
     MOV CX,BULLET_X
     MOV AL,0DH
     MOV AH,0CH
     INT 10H
     INC DX
     POP CX
     LOOP BULLET_LOOP
     RET
DRAW_BULLET ENDP
;-----------------------------
;-----------------------------
DELETE_BULLET PROC
     MOV DX,BULLET_Y
     MOV CX,5
     BULLET_LOOP2:                  ;DRAW BULLET WITH BLACK COLOR ATTRIBUTE
     PUSH CX
     MOV CX,BULLET_X
     MOV AL,BLACK
     MOV AH,0CH
     INT 10H
     INC DX
     POP CX
     LOOP BULLET_LOOP2
     RET
DELETE_BULLET ENDP
;-----------------------------
;-----------------------------
MOVE_BULLET PROC
     CMP BULLET_FLAG,1              ;CHECK IF BULLET FLAG IS 1
     JNE FINISH_MOVE_BULLET
     CALL DELETE_BULLET
     SUB BULLET_Y,20                ;MOV THE POSITION 20 PIXELS UP
     MOV CX,0H       ;DELAY
     MOV DX,1388H
     MOV AX,8600H
     INT 15H
     CALL DRAW_BULLET               ;DRAW THE BULLET
     FINISH_MOVE_BULLET:
     MOV AX,BULLET_Y
     SUB AX,101                     ;BOUNDARY CONDITION IS THE UFO HEIGHT
     CMP AX,5
     JAE ABOVE_MOVE_BULLET
     MOV BULLET_FLAG,0
     CALL DELETE_BULLET
     ABOVE_MOVE_BULLET:
     RET
MOVE_BULLET ENDP     
     
;-------------------------------------------
;SHAPES PROCEDURES:
;-----------

;TRIANGLE PROCEDURES 
DRAW_TRIANGLE PROC
    ;-----------
    MOV TRIANGLE_COUNTER,0
    MOV CX,10
    ;----------------------
    MOV AX,TRIANGLE_Y
    MOV T_DRAW_Y,AX
    ;-----------
    TRIANGLE_LOOP1:
    PUSH CX
    MOV AX,TRIANGLE_X
    MOV T_DRAW_X,AX
    MOV AX,TRIANGLE_COUNTER
    SUB T_DRAW_X,AX
    INC T_DRAW_Y
    ;-----------
    MOV CX,1
    ADD CX,TRIANGLE_COUNTER
    ADD CX,TRIANGLE_COUNTER ;LOOP2 LIMIT
    ;-----------
    TRIANGLE_LOOP2:
    PUSH CX
    MOV CX,T_DRAW_X
    MOV DX,T_DRAW_Y
    MOV AL,TRIANGLE_COLOR
    MOV AH,0CH
    INT 10H
    INC T_DRAW_X
    POP CX
    LOOP TRIANGLE_LOOP2
    ;-----------
    INC TRIANGLE_COUNTER
    POP CX
    LOOP TRIANGLE_LOOP1
    ;----------------------
    RET
DRAW_TRIANGLE ENDP
;-----------------------------
;-----------------------------
DELETE_TRIANGLE PROC
    ;-----------
    MOV TRIANGLE_COUNTER,0
    MOV CX,10
    ;----------------------
    MOV AX,TRIANGLE_Y
    MOV T_DRAW_Y,AX
    ;-----------
    TRIANGLE2_LOOP1:
    PUSH CX
    MOV AX,TRIANGLE_X
    MOV T_DRAW_X,AX
    MOV AX,TRIANGLE_COUNTER
    SUB T_DRAW_X,AX
    INC T_DRAW_Y
    ;-----------
    MOV CX,1
    ADD CX,TRIANGLE_COUNTER
    ADD CX,TRIANGLE_COUNTER       ;LOOP2 LIMIT
    ;-----------
    TRIANGLE2_LOOP2:
    PUSH CX
    MOV CX,T_DRAW_X
    MOV DX,T_DRAW_Y
    MOV AL,BLACK
    MOV AH,0CH
    INT 10H
    INC T_DRAW_X
    POP CX
    LOOP TRIANGLE2_LOOP2
    ;-----------
    INC TRIANGLE_COUNTER
    POP CX
    LOOP TRIANGLE2_LOOP1
    ;----------------------
    RET
DELETE_TRIANGLE ENDP
;-----------------------------
;-----------------------------    
THROW_TRIANGLE PROC
    
    CALL DELETE_TRIANGLE
    ADD TRIANGLE_Y,10             ;MOVE THE POSITION 10 PIXELS DOWN
    CMP TRIANGLE_SHOT,1           ;CHECK IF IT'S SHOT 
    JE  TRIANGLE_ABOVE            ;IF SHOT DONT CALL THE DRAW FUNCTION
    CALL DRAW_TRIANGLE
    TRIANGLE_ABOVE:
    MOV CX,1H       ;DELAY
    MOV DX,1388H
    MOV AX,8600H
    INT 15H
    RET
THROW_TRIANGLE ENDP
;-----------------------------
;-----------------------------
;----------------------------------------
;CIRCLE PROCEDURES
DRAW_CIRCLE PROC 
    MOV SI,CIRCLE_Y
    MOV DI,CIRCLE_X
    SUB DI,5
    ;----------
    MOV CX,DI
    MOV DX,SI
    MOV AL,CIRCLE_COLOR
    MOV AH,0CH
    ADD DI,10
    ;----------
    CIRCLE_BACK_DRAW:
    INT 10H
    INC CX
    CMP CX,DI
    JNZ CIRCLE_BACK_DRAW
    ;----------
    MOV BX,10
    MOV DI,CIRCLE_X
    SUB DI,5
    ;------------------------
    CIRCLE_LOOP2:
    MOV AX,2
    MOV SI,CIRCLE_Y
    INC SI
    ;----------
    CIRCLE_LOOP1:
    PUSH AX
    MOV CX,DI
    MOV DX,SI
    MOV AL,CIRCLE_COLOR
    MOV AH,0CH
    INT 10H
    POP AX
    SUB SI,2
    DEC AX
    CMP AX,0
    JNZ CIRCLE_LOOP1 
    ;----------
    INC DI
    DEC BX
    CMP BX,0
    JNZ CIRCLE_LOOP2 
    ;-----------------------
    MOV BX,8
    MOV DI,CIRCLE_X
    SUB DI,4
    ;-----------------------
    CIRCLE_LOOP22:
    MOV AX,2
    MOV SI,CIRCLE_Y
    ADD SI,2
    ;----------
    CIRCLE_LOOP21:
    PUSH AX
    MOV CX,DI
    MOV DX,SI
    MOV AL,CIRCLE_COLOR
    MOV AH,0CH
    INT 10H
    POP AX
    SUB SI,4
    DEC AX
    CMP AX,0
    JNZ CIRCLE_LOOP21 
    ;----------
    INC DI
    DEC BX
    CMP BX,0
    JNZ CIRCLE_LOOP22
    ;-----------------------
    
    MOV BX,8
    MOV DI,CIRCLE_X
    SUB DI,4
    ;-----------------------
    CIRCLE_LOOP32:
    MOV AX,2
    MOV SI,CIRCLE_Y
    ADD SI,3
    ;----------
    CIRCLE_LOOP31:
    PUSH AX
    MOV CX,DI
    MOV DX,SI
    MOV AL,CIRCLE_COLOR
    MOV AH,0CH
    INT 10H
    POP AX
    SUB SI,6
    DEC AX
    CMP AX,0
    JNZ CIRCLE_LOOP31
    ;----------
    INC DI
    DEC BX
    CMP BX,0
    JNZ CIRCLE_LOOP32 
    ;-----------------------
    
    MOV BX,6
    MOV DI,CIRCLE_X
    SUB DI,3
    ;-----------------------
    CIRCLE_LOOP42:
    MOV AX,2
    MOV SI,CIRCLE_Y
    ADD SI,4
    ;----------
    CIRCLE_LOOP41:
    PUSH AX
    MOV CX,DI
    MOV DX,SI
    MOV AL,CIRCLE_COLOR
    MOV AH,0CH
    INT 10H
    POP AX
    SUB SI,8
    DEC AX
    CMP AX,0
    JNZ CIRCLE_LOOP41
    ;----------
    INC DI
    DEC BX
    CMP BX,0
    JNZ CIRCLE_LOOP42
    ;-----------------------
    RET
DRAW_CIRCLE ENDP    
;-----------------------------
;-----------------------------    
DELETE_CIRCLE PROC 
    MOV SI,CIRCLE_Y
    MOV DI,CIRCLE_X
    SUB DI,5
    ;----------
    MOV CX,DI
    MOV DX,SI
    MOV AL,BLACK
    MOV AH,0CH
    ADD DI,10
    ;----------
    D_CIRCLE_BACK_DRAW:
    INT 10H
    INC CX
    CMP CX,DI
    JNZ D_CIRCLE_BACK_DRAW
    ;----------
    MOV BX,10
    MOV DI,CIRCLE_X
    SUB DI,5
    ;------------------------
    D_CIRCLE_LOOP2:
    MOV AX,2
    MOV SI,CIRCLE_Y
    INC SI
    ;----------
    D_CIRCLE_LOOP1:
    PUSH AX
    MOV CX,DI
    MOV DX,SI
    MOV AL,BLACK
    MOV AH,0CH
    INT 10H
    POP AX
    SUB SI,2
    DEC AX
    CMP AX,0
    JNZ D_CIRCLE_LOOP1 
    ;----------
    INC DI
    DEC BX
    CMP BX,0
    JNZ D_CIRCLE_LOOP2 
    ;-----------------------
    MOV BX,8
    MOV DI,CIRCLE_X
    SUB DI,4
    ;-----------------------
    D_CIRCLE_LOOP22:
    MOV AX,2
    MOV SI,CIRCLE_Y
    ADD SI,2
    ;----------
    D_CIRCLE_LOOP21:
    PUSH AX
    MOV CX,DI
    MOV DX,SI
    MOV AL,BLACK
    MOV AH,0CH
    INT 10H
    POP AX
    SUB SI,4
    DEC AX
    CMP AX,0
    JNZ D_CIRCLE_LOOP21 
    ;----------
    INC DI
    DEC BX
    CMP BX,0
    JNZ D_CIRCLE_LOOP22
    ;-----------------------
    
    MOV BX,8
    MOV DI,CIRCLE_X
    SUB DI,4
    ;-----------------------
    D_CIRCLE_LOOP32:
    MOV AX,2
    MOV SI,CIRCLE_Y
    ADD SI,3
    ;----------
    D_CIRCLE_LOOP31:
    PUSH AX
    MOV CX,DI
    MOV DX,SI
    MOV AL,BLACK
    MOV AH,0CH
    INT 10H
    POP AX
    SUB SI,6
    DEC AX
    CMP AX,0
    JNZ D_CIRCLE_LOOP31
    ;----------
    INC DI
    DEC BX
    CMP BX,0
    JNZ D_CIRCLE_LOOP32 
    ;-----------------------
    
    MOV BX,6
    MOV DI,CIRCLE_X
    SUB DI,3
    ;-----------------------
    D_CIRCLE_LOOP42:
    MOV AX,2
    MOV SI,CIRCLE_Y
    ADD SI,4
    ;----------
    D_CIRCLE_LOOP41:
    PUSH AX
    MOV CX,DI
    MOV DX,SI
    MOV AL,BLACK
    MOV AH,0CH
    INT 10H
    POP AX
    SUB SI,8
    DEC AX
    CMP AX,0
    JNZ D_CIRCLE_LOOP41
    ;----------
    INC DI
    DEC BX
    CMP BX,0
    JNZ D_CIRCLE_LOOP42
    ;-----------------------
    RET
DELETE_CIRCLE ENDP
;-----------------------------
;-----------------------------
THROW_CIRCLE PROC
    CALL DELETE_CIRCLE            ;SAME IDEA AS THROW TRIANGLE
    ADD CIRCLE_Y,10
    CMP CIRCLE_SHOT,1
    JE  CIRCLE_ABOVE
    CALL DRAW_CIRCLE
    CIRCLE_ABOVE:
    MOV CX,1H       ;DELAY
    MOV DX,1388H
    MOV AX,8600H
    INT 15H
    RET
THROW_CIRCLE ENDP
;-----------------------------
;-----------------------------
;----------------------------------------
;SQUARE PROCEDURES

DRAW_SQUARE PROC
    ;-----------
    MOV CX,15
    ;----------------------
    MOV AX,SQUARE_Y
    MOV S_DRAW_Y,AX
    ;-----------
    SQUARE_LOOP1:
    MOV AX,SQUARE_X
    MOV S_DRAW_X,AX
    PUSH CX
    ;-----------
    MOV CX,15
    ;-----------
    SQUARE_LOOP2:
    PUSH CX
    MOV CX,S_DRAW_X
    MOV DX,S_DRAW_Y
    MOV AL,SQUARE_COLOR
    MOV AH,0CH
    INT 10H
    INC S_DRAW_X
    POP CX
    LOOP SQUARE_LOOP2
    ;-----------
    POP CX
    INC S_DRAW_Y
    LOOP SQUARE_LOOP1
    ;----------------------
    RET
DRAW_SQUARE ENDP
;-----------------------------
;-----------------------------
DELETE_SQUARE PROC
    ;-----------
    MOV CX,15
    ;----------------------
    MOV AX,SQUARE_Y
    MOV S_DRAW_Y,AX
    ;-----------
    D_SQUARE_LOOP1:
    MOV AX,SQUARE_X
    MOV S_DRAW_X,AX
    PUSH CX
    ;-----------
    MOV CX,15
    ;-----------
    D_SQUARE_LOOP2:
    PUSH CX
    MOV CX,S_DRAW_X
    MOV DX,S_DRAW_Y
    MOV AL,BLACK
    MOV AH,0CH
    INT 10H
    INC S_DRAW_X
    POP CX
    LOOP D_SQUARE_LOOP2
    ;-----------
    POP CX
    INC S_DRAW_Y
    LOOP D_SQUARE_LOOP1
    ;----------------------
    RET
DELETE_SQUARE ENDP
;-----------------------------
;-----------------------------
THROW_SQUARE PROC
    CALL DELETE_SQUARE               ;SAME IDEA AS THROW TRIANGLE
    ADD SQUARE_Y,10
    CMP SQUARE_SHOT,1
    JE  SQUARE_ABOVE
    CALL DRAW_SQUARE
    SQUARE_ABOVE:
    MOV CX,1H       ;DELAY
    MOV DX,1388H
    MOV AX,8600H
    INT 15H
    RET
THROW_SQUARE ENDP
;-----------------------------
;-----------------------------
;----------------------------------------
;SQUARE PROCEDURES

DRAW_RECTANGLE PROC
    ;-----------
    MOV CX,30
    ;----------------------
    MOV AX,RECTANGLE_Y
    MOV R_DRAW_Y,AX
    ;-----------
    RECTANGLE_LOOP1:
    MOV AX,RECTANGLE_X
    MOV R_DRAW_X,AX
    PUSH CX
    ;-----------
    MOV CX,15
    ;-----------
    RECTANGLE_LOOP2:
    PUSH CX
    MOV CX,R_DRAW_X
    MOV DX,R_DRAW_Y
    MOV AL,RECTANGLE_COLOR
    MOV AH,0CH
    INT 10H
    INC R_DRAW_X
    POP CX
    LOOP RECTANGLE_LOOP2
    ;-----------
    POP CX
    INC R_DRAW_Y
    LOOP RECTANGLE_LOOP1
    ;----------------------
    RET
DRAW_RECTANGLE ENDP
;-----------------------------
;-----------------------------
DELETE_RECTANGLE PROC
    ;-----------
    MOV CX,30
    ;----------------------
    MOV AX,RECTANGLE_Y
    MOV R_DRAW_Y,AX
    ;-----------
    D_RECTANGLE_LOOP1:
    MOV AX,RECTANGLE_X
    MOV R_DRAW_X,AX
    PUSH CX
    ;-----------
    MOV CX,15
    ;-----------
    D_RECTANGLE_LOOP2:
    PUSH CX
    MOV CX,R_DRAW_X
    MOV DX,R_DRAW_Y
    MOV AL,BLACK
    MOV AH,0CH
    INT 10H
    INC R_DRAW_X
    POP CX
    LOOP D_RECTANGLE_LOOP2
    ;-----------
    POP CX
    INC R_DRAW_Y
    LOOP D_RECTANGLE_LOOP1
    ;----------------------
    RET
DELETE_RECTANGLE ENDP
;-----------------------------
;-----------------------------
THROW_RECTANGLE PROC
    CALL DELETE_RECTANGLE            ;SAME IDEA AS THROW TRIANGLE
    ADD RECTANGLE_Y,10
    CMP RECTANGLE_SHOT,1
    JE  RECTANGLE_ABOVE
    CALL DRAW_RECTANGLE
    RECTANGLE_ABOVE:
    MOV CX,1H       ;DELAY
    MOV DX,1388H
    MOV AX,8600H
    INT 15H
    RET
THROW_RECTANGLE ENDP
;-----------------------------
;-----------------------------
INITIALIZE_SHAPES PROC
    
    CMP THROW_COUNTER,8               ;COUNTER TO MAKE A DELAY BETWEEN POWERUPS FALLING
    JE  ASSIST_RESET_AND_END
    CMP THROW_COUNTER,0
    JNE ASSIST_INC_AND_END
    ;----------------------
    CMP SHAPE_CHECK_FLAG,16           ;COUNTER TO MAKE A VERTICAL DISTANCE BETWEEN POWERUPS BY DELAYING THROW
    JNE CONTINUE_INIT
    MOV SHAPE_CHECK_FLAG,0
    INC SHAPE_COUNTER
    CMP SHAPE_COUNTER,5               ;INC SHAPE COUNTER (1-SQUARE 2-CIRCLE 3-RECTANGLE 4- TRIANGLE)
    JNE CONTINUE_INIT
    MOV SHAPE_COUNTER,1
    ;----------------------
    CONTINUE_INIT:
    INC SHAPE_CHECK_FLAG
    
    CMP SQUARE_THROWN,1
    JE CIRCLE_THROW
    MOV AX,CHARACTER2_INITIAL_X       ;INITILAIZE THE SHAPE X-COORDINATE ACCORDING TO THE POSITION OF THEUFO
    ADD AX,28
    MOV SQUARE_X,AX
    MOV SQUARE_Y,101                  ;INITIALIZE THE Y-COORDINATE UNDER THE UFO
    MOV SQUARE_THROWN,1
    ASSIST_INC_AND_END:
    JMP INC_AND_END
    ;----------------------
    CIRCLE_THROW:
    CMP CIRCLE_THROWN,1               ;SAME IDEA
    JE TRIANGLE_THROW
    MOV AX,CHARACTER2_INITIAL_X
    ADD AX,35
    MOV CIRCLE_X,AX
    MOV CIRCLE_Y,106
    MOV CIRCLE_THROWN,1
    JMP INC_AND_END
    ;----------------------
    ASSIST_RESET_AND_END:
    JMP RESET_AND_END
    ;----------------------
    TRIANGLE_THROW:                   ;SAME IDEA
    CMP TRIANGLE_THROWN,1
    JE RECTANGLE_THROW
    MOV AX,CHARACTER2_INITIAL_X
    ADD AX,35
    MOV TRIANGLE_X,AX
    MOV TRIANGLE_Y,101
    MOV TRIANGLE_THROWN,1
    JMP INC_AND_END
    ;----------------------
    
    
    RECTANGLE_THROW:                   ;SAME IDEA
    CMP RECTANGLE_THROWN,1
    JE INC_AND_END
    MOV AX,CHARACTER2_INITIAL_X
    ADD AX,28
    MOV RECTANGLE_X,AX
    MOV RECTANGLE_Y,101
    MOV RECTANGLE_THROWN,1
    ;----------------------
    
    INC_AND_END:
    INC THROW_COUNTER
    JMP FINISH_INIT_SHAPES
    RESET_AND_END:
    MOV THROW_COUNTER,0
    FINISH_INIT_SHAPES:
    RET

INITIALIZE_SHAPES ENDP
;-----------------------------
;-----------------------------
THROW_SHAPES PROC
    ;CHECK THE SHAPES FLAGS AND CALL THE SUITABLE THROW PROCEDURE ACCORDINGLY
    CMP SQUARE_THROWN,0
    JE CIRCLE_THROW2
    CALL THROW_SQUARE
    
    CIRCLE_THROW2:
    CMP CIRCLE_THROWN,0
    JE TRIANGLE_THROW2
    CALL THROW_CIRCLE
    
    TRIANGLE_THROW2:
    CMP TRIANGLE_THROWN,0
    JE RECTANGLE_THROW2
    CALL THROW_TRIANGLE
    
    RECTANGLE_THROW2:
    CMP RECTANGLE_THROWN,0
    JE FINISH_THROW_SHAPES
    CALL THROW_RECTANGLE
    ;-------------------------
    FINISH_THROW_SHAPES:
    
    ;1ST CHECK
    MOV AX,447
    SUB AX,SQUARE_Y
    CMP AX,16                     ;CONDITION THAT THE SHAPE REACHED THE ALIEN HEIGHT
    JA SEC_CHECK
    CMP SQUARE_SHOT,1             ;CHECK IF THE SHAPE IS SHOT SET THE ABOVE FLAG TO 1
    JNE ABOVE_111
    MOV ABOVE_FLAG,1
    ABOVE_111:
    CALL DELETE_SQUARE            ;IF HEIGHT BOUNDARY CONDITION THEN DELETE THE SQUARE
    MOV SQUARE_Y,101
    MOV SQUARE_THROWN,0           ;RESET THE FLAGS
    MOV SQUARE_SHOT,0
    CMP ABOVE_FLAG,1
    JE  SEC_CHECK
    CMP SHAPE_COUNTER,1
    JNE  SEC_CHECK                
    DEC LIFE                      ;IF IT WAS THE REQUIRED SHAPE AND IT REACHED THE HEIGHT BOUNDARY WITHOUT BEING SHOT DEC LIFE
    ;-------------------------
    SEC_CHECK:                    ;SAME IDEA OF FIRST CHECK
    MOV AX,447
    SUB AX,CIRCLE_Y
    CMP AX,6
    JA THIRD_CHECK
    CMP CIRCLE_SHOT,1
    JNE ABOVE_222
    MOV ABOVE_FLAG,1
    ABOVE_222:
    CALL DELETE_CIRCLE
    MOV CIRCLE_Y,106
    MOV CIRCLE_THROWN,0
    MOV CIRCLE_SHOT,0
    CMP ABOVE_FLAG,1
    JE  SEC_CHECK
    CMP SHAPE_COUNTER,2
    JNE THIRD_CHECK
    DEC LIFE
    ;-------------------------   ;SAME IDEA OF FIRST CHECK
    THIRD_CHECK:
    MOV AX,447
    SUB AX,RECTANGLE_Y
    CMP AX,40
    JA FOURTH_CHECK
    CMP RECTANGLE_SHOT,1
    JNE ABOVE_333
    MOV ABOVE_FLAG,1
    ABOVE_333:
    CALL DELETE_RECTANGLE
    MOV RECTANGLE_Y,101
    MOV RECTANGLE_THROWN,0
    MOV RECTANGLE_SHOT,0
    CMP ABOVE_FLAG,1
    JE  FOURTH_CHECK
    CMP SHAPE_COUNTER,3
    JNE FOURTH_CHECK
    DEC LIFE 
    ;-------------------------
    FOURTH_CHECK:                  ;SAME IDEA OF FIRST CHECK
    MOV AX,447
    SUB AX,TRIANGLE_Y
    CMP AX,17
    JA ABOVE_THROW_SHAPES
    CMP TRIANGLE_SHOT,1
    JNE ABOVE_444
    MOV ABOVE_FLAG,1
    ABOVE_444:
    CALL DELETE_TRIANGLE
    MOV TRIANGLE_Y,101
    MOV TRIANGLE_THROWN,0
    MOV TRIANGLE_SHOT,0
    CMP ABOVE_FLAG,1
    JE  ABOVE_THROW_SHAPES
    CMP SHAPE_COUNTER,4
    JNE ABOVE_THROW_SHAPES
    DEC LIFE
    
    ABOVE_THROW_SHAPES:
    MOV ABOVE_FLAG,0
    RET
THROW_SHAPES ENDP
;-----------------------------
;-----------------------------
SHAPE_MEETS_BULLET PROC
    CMP BULLET_FLAG,0                ;CHECK THE BULLET FLAG TO SEE IF A BULLET ID SHOT
    JE ASSIST_FINISH_SHOT_CHECK
    ;-------------------------
    CMP SQUARE_THROWN,0              ;CHECK IF THERE'S A SQUARE FALLING
    JE C_B_CHECK
    CMP SQUARE_SHOT,1                ;CHECK IF THE SQAURE IS ALREADY SHOT
    JE C_B_CHECK                     ;IF IT'S SHOT GO TO THE NEXT CHECK (CIRCLE CHECK)
    ;CHECK THAT THE BULLET IS BETWEEN THE SQAURE COORDINATES
    MOV AX,SQUARE_Y
    ADD AX,15
    CMP BULLET_Y,AX
    JA C_B_CHECK
    MOV AX,SQUARE_X
    CMP BULLET_X,AX
    JB C_B_CHECK
    ADD AX,15
    CMP BULLET_X,AX
    JA C_B_CHECK
    MOV SQUARE_SHOT,1
    CMP SHAPE_COUNTER,1
    JNE CONTINUE_S_B
    INC SCORE
    CONTINUE_S_B:                    ;IF THE BULLET MEETS THE SHAPE
    MOV BULLET_FLAG,0
    CALL DELETE_SQUARE
    CALL DELETE_BULLET
    CMP SHAPE_COUNTER,1
    JE  ASSIST_FINISH_SHOT_CHECK
    DEC LIFE                         ;IF IT'S NOT THE REQUIRED SHAPE DEC LIFE
    ASSIST_FINISH_SHOT_CHECK:
    JMP FINISH_SHOT_CHECK
    ;-------------------------
    C_B_CHECK:                       ;SAME IDEA AS FIRST CHECK
    CMP CIRCLE_THROWN,0
    JE T_B_CHECK
    CMP CIRCLE_SHOT,1
    JE T_B_CHECK
    MOV AX,CIRCLE_Y
    ADD AX,5
    CMP BULLET_Y,AX
    JA T_B_CHECK
    MOV AX,CIRCLE_X
    SUB AX,5
    CMP BULLET_X,AX
    JB T_B_CHECK
    ADD AX,10
    CMP BULLET_X,AX
    JA T_B_CHECK
    MOV CIRCLE_SHOT,1
    CMP SHAPE_COUNTER,2
    JNE CONTINUE_C_B
    INC SCORE
    CONTINUE_C_B:
    MOV BULLET_FLAG,0
    CALL DELETE_CIRCLE
    CALL DELETE_BULLET
    CMP SHAPE_COUNTER,2
    JE  ASSIST_FINISH_SHOT_CHECK
    DEC LIFE
    JMP FINISH_SHOT_CHECK
    ;-------------------------
    T_B_CHECK:                      ;SAME IDEA AS FIRST CHECK
    CMP TRIANGLE_THROWN,0
    JE R_B_CHECK
    CMP TRIANGLE_SHOT,1
    JE R_B_CHECK
    MOV AX,TRIANGLE_Y
    ADD AX,10
    CMP BULLET_Y,AX
    JA R_B_CHECK
    MOV AX,TRIANGLE_X
    SUB AX,5
    CMP BULLET_X,AX
    JB R_B_CHECK
    ADD AX,10
    CMP BULLET_X,AX
    JA R_B_CHECK
    MOV TRIANGLE_SHOT,1
    CMP SHAPE_COUNTER,4
    JNE CONTINUE_T_B
    INC SCORE
    CONTINUE_T_B:
    MOV BULLET_FLAG,0
    CALL DELETE_TRIANGLE
    CALL DELETE_BULLET
    CMP SHAPE_COUNTER,4
    JE  ASSIST_FINISH_SHOT_CHECK2
    DEC LIFE
    ASSIST_FINISH_SHOT_CHECK2:
    JMP FINISH_SHOT_CHECK
    ;-------------------------
    R_B_CHECK:                        ;SAME IDEA AS FIRST CHECK
    CMP RECTANGLE_THROWN,0
    JE FINISH_SHOT_CHECK
    CMP RECTANGLE_SHOT,1
    JE FINISH_SHOT_CHECK
    MOV AX,RECTANGLE_Y
    ADD AX,30
    CMP BULLET_Y,AX
    JA FINISH_SHOT_CHECK
    MOV AX,RECTANGLE_X
    CMP BULLET_X,AX
    JB FINISH_SHOT_CHECK
    ADD AX,15
    CMP BULLET_X,AX
    JA FINISH_SHOT_CHECK
    MOV RECTANGLE_SHOT,1
    CMP SHAPE_COUNTER,3
    JNE CONTINUE_R_B
    INC SCORE
    CONTINUE_R_B:
    MOV BULLET_FLAG,0
    CALL DELETE_RECTANGLE
    CALL DELETE_BULLET
    CMP SHAPE_COUNTER,3
    JE  FINISH_SHOT_CHECK
    DEC LIFE
    ;-------------------------
    FINISH_SHOT_CHECK:
    RET
SHAPE_MEETS_BULLET ENDP
;----------------------------------------
;PRINTING SCORE PROCEDURES
PRINT_SCORE PROC
    MOV AH,2
    MOV DL,3
    MOV DH,1
    INT 10H
    ;----------------------
    ;PRINT THE NAME OF THE REQUIRED SHAPE TO BE SHOT (KNOWN BY COMPARING THE SHAPE_COUNTER VALUE)
    CMP SHAPE_COUNTER,1
    JNE SEC_MSG_CHECK
    LEA DX,MSG1
    JMP CONTINUE_PRINT
    SEC_MSG_CHECK:
    CMP SHAPE_COUNTER,2
    JNE THIRD_MSG_CHECK
    LEA DX,MSG2
    JMP CONTINUE_PRINT
    THIRD_MSG_CHECK:
    CMP SHAPE_COUNTER,3
    JNE FOURTH_MSG_CHECK
    LEA DX,MSG3
    JMP CONTINUE_PRINT
    FOURTH_MSG_CHECK:
    LEA DX,MSG4
    ;---------------------
    
    CONTINUE_PRINT:
    MOV AH,9
    INT 21H
    ;---------------------           ;PRINTING THE HEARTS AND THE SCORE AFTER ADJUSTING THE CURSOR POSITION
    MOV AH,2
    MOV DL,27
    MOV DH,1
    INT 10H 
    
    LEA DX,HEART
    MOV AH,9
    INT 21H
    
    MOV AH,2
    MOV DL,LIFE
    INT 21H
    ;---------------------
    MOV AH,2
    MOV DL,40
    MOV DH,1
    INT 10H
    
    LEA DX,SCORE_MSG
    MOV AH,9
    INT 21H
    ;---------------------
    
    CALL DISPLAY_SCORE
    
    MOV AH,2
    MOV DL,40
    MOV DH,1
    INT 10H
    
    MOV AH,2
    MOV DL,0
    MOV DH,2
    INT 10H
    
    LEA DX,LINE
    MOV AH,9
    INT 21H
    ;---------------------
    RET
PRINT_SCORE ENDP

DISPLAY_SCORE PROC
    PUSH AX
    PUSH CX
    PUSH DX
    ;---------------------
    MOV AX,SCORE         ;MOVE THE COUNT IN AL
    MOV CL,10            ;DIVIDE BY 10
    DIV CL               ;TO SEPARATE THE HIGHER AND LOWER DIGIT
    PUSH AX              ;SAVE THE VALUE IN AX
    ;---------------------
    MOV AH,2           
    ADD AL,30H           
    MOV DL,AL
    INT 21H              ;PRINT
    ;---------------------
    POP AX               ;RETRIEVE VALUES OF AX
    XCHG AH,AL           ;XCHG AL AND AH TO MOV LOWER DIGIT IN AL
    ADD AL,30H           ;ADD 30 TO CONVERT IT TO ASCII
    ;---------------------
    MOV AH,2
    MOV DL,AL
    INT 21H 
    ;---------------------
    POP DX
    POP CX
    POP AX
    
    RET   
    
DISPLAY_SCORE ENDP 

END MAIN